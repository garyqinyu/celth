/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
// pfdialog.hpp
//
// PegFileDialog capable of being used for opening, saving and 'saving as' 
// a file on Unix style OS (uses POSIX style directory routines).
// This class may be optionally included in the standard PEG library if
// needed, but is originally intended to be used along with the PEG
// utilities (WindowBuilder, ImageConvert and FontCapture).
//
// Author: Jim DeLisle
//
// Copyright (c) 1998-2002 Swell Software 
//              All Rights Reserved.
//
// Unauthorized redistribution of this source code, in whole or part,
// without the express written permission of Swell Software
// is strictly prohibited.
//
// Notes:
//
//	This class is intended for use on Unix style OS's only. For Win32
//  development platforms, use the standard Win32 file dialog box.
//
//  To do:
//  
//  1.) Sort the directory and file listings - DONE
//  2.) Allow the user to enter a file name in the selection string
//  3.) Allow the user to navigate by entering directory names or ".."
//      in the selection string.
//  4.) Make the dialog sizeable, coercing the controls to position
//      themselves accordingly.
//  5.) Filtering (user defined and application defined) - DONE for
//      application defined.
//
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#ifndef PEG_FILE_DIALOG_HPP
#define PEG_FILE_DIALOG_HPP

/*---------------------------------------------------------------------------*/
// Constants for return values and modes of operation
/*---------------------------------------------------------------------------*/
const SIGNED PFD_ERROR          = -1;
const SIGNED PFD_NOOPERATION    = 0;

const SIGNED PFD_FILEOPEN       = 0x01;
const SIGNED PFD_FILESAVEAS     = 0x02;

const SIGNED PFD_CREATEPROMPT       = 0x10;
const SIGNED PFD_FILEMUSTEXIST      = 0x20;
const SIGNED PFD_CREATETESTFILE     = 0x40;
const SIGNED PFD_OVERWRITEPROMPT    = 0x80;

const WORD PFD_BUFFERLEN        = 257;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
class PegFileFilter
{
    public:
        PegFileFilter();
        PegFileFilter(const char* pFilter);
        ~PegFileFilter();

        WORD Set(const char* pFilter);

        // Accessors
        WORD GetFilterCount() const { return mwFilterCount; }
        const char* GetFilterName() const 
        {
            return mpFilterName;
        }
        char** GetFilterList() const { return mpFilterList; }

    private:
        void Reset();

        WORD     mwFilterCount;
        char*    mpFilterName;
        char**   mpFilterList;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
class PegListSortButton : public PegTextButton
{
    public:
        PegListSortButton(PegRect& tRect, const PEGCHAR* pText, 
                          WORD wID, WORD wStyle);
        ~PegListSortButton();
        
        // Overrides
        void Draw();
        
        BOOL GetStartLow() const { return mbStartLow; }
        void SetStartLow(BOOL bSet, BOOL bRedraw = TRUE) 
        { 
            mbStartLow = bSet;
            if(bRedraw)
            {
                Invalidate();
                Draw();
            }
        }
        
    protected:
        BOOL    mbStartLow;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
class PegFileDialog : public PegDialog
{
    public:
        PegFileDialog(const PEGCHAR* pTitle, SIGNED iLeft = -1,
                      SIGNED iTop = -1);
        virtual ~PegFileDialog();

        // Overrides
        SIGNED Message(const PegMessage& Mesg);
        SIGNED Execute();
        //void Resize(PegRect Rect);

        // Operations
        BOOL SetMode(SIGNED iOperation, PEGCHAR* pBuffer, WORD wBuffSize,
                     const char* pStartNode = NULL);
        void SetFilter(const char* pFilter);
        void SetDefNewExt(char* pExt)
        {
            mpDefNewExt = pExt;
        }
        
        SIGNED GetOperation() const { return(miOperation); }

        // Callbacks for qsort operations
        static int SortDirList(const void*, const void*);
        static int SortFileList(const void*, const void*);

	protected:
        PegVertList*    mpDirList;
		PegVertList*	mpFileList;
		PegString*		mpFileString;
		//PegRect       mtMinSize;
		char*           mpLastValidDir;
        SIGNED          miOperation;
        BOOL            mbViewAll;
        BOOL            mbFilterActive;
        PegPrompt*      mpPresentDir;
        PegPrompt*      mpFilter;
        SIGNED          miReturnCode;
        PEGCHAR*        mpFileNameBuffer;
        WORD            mwFileNameBufferLen;
        char*           mpDefNewExt;
        PegListSortButton*  mpSortDir;
        PegListSortButton*  mpSortFile;
        PegFileFilter*      mpCurrentFilter;
        PegFileFilter**     mpFilterList;
        WORD                mwFilterCount;

        static BOOL     mbSortDirLowToHigh;
        static BOOL     mbSortFileLowToHigh;

        BOOL TryChangeDir(const char* pPath);
        void RepopulateDirList();
        void RepopulateFileList();
        void ClearDirList();
        void ClearFileList();
        void ClearFileName();
        void UpdatePresentDir();
        BOOL BuildNewDirName(const char* pAppendDir);
        char* BuildFileName();
        BOOL CheckFileExists(const char* pFileName);
        BOOL CheckFileCreate(const char* pFileName);
        char* AddDefExtToFileName(char* pFileName);
        BOOL ValidateEntry();
       #if defined(PEG_UNICODE)
        char* ConvertDataGet(const PEGCHAR* pData);
       #endif
        void ResetFilter();
        void StoreFilter(const char* pFilter);
        void UpdateFilter();
        void FormatFilter(char* pBuffer, WORD wBufLen,
                          const PegFileFilter* pFilter);

        enum ControlIDs{
            IDB_UPDIR = 101,
            IDB_HOME,
            IDB_REFRESH,
            IDB_VIEWALL,
            IDB_APPLYFILTER,
            IDB_SORTDIR,
            IDB_SORTFILE,
            IDC_DIRLIST,
            IDC_FILELIST,
            IDC_DIRPROMPT,
            IDC_FILEPROMPT,
            IDC_SELECTION,
            IDC_PRESENTDIR
        };
};

#endif  // PEG_FILE_DIALOG_HPP

#ifdef INCLUDE_PFDIALOG_BITMAPS

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
// Bitmaps used on the toolbar. 
// 
// At this time, there is only 1 set of bitmaps that play to the lowest
// common denominator: non-rotated, 8bit (even though they only use 4 bits
// of color), and disregarding if we're doing run time color checking.
// 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
// The small file bitmap:
static ROMDATA UCHAR ucfilsmallBitmap[150] = {
0x0f,0xff,0x81,0xff,0xff,0x0b,0x00,0x81,0xff,0xff,0x82,0xff,0xff,0x00,0x09,0x0f,
0x82,0x00,0xff,0xff,0x83,0xff,0xff,0x00,0x0f,0x07,0x7c,0x83,0x0f,0x00,0xff,0xff,
0x82,0xff,0xff,0x00,0x09,0x0f,0x82,0x00,0xff,0xff,0x83,0xff,0xff,0x00,0x0f,0x07,
0x7c,0x83,0x0f,0x00,0xff,0xff,0x82,0xff,0xff,0x00,0x09,0x0f,0x82,0x00,0xff,0xff,
0x83,0xff,0xff,0x00,0x0f,0x07,0x7c,0x83,0x0f,0x00,0xff,0xff,0x82,0xff,0xff,0x00,
0x09,0x0f,0x82,0x00,0xff,0xff,0x83,0xff,0xff,0x00,0x0f,0x07,0x7c,0x83,0x0f,0x00,
0xff,0xff,0x82,0xff,0xff,0x00,0x09,0x0f,0x82,0x00,0xff,0xff,0x83,0xff,0xff,0x00,
0x0f,0x07,0x7c,0x83,0x0f,0x00,0xff,0xff,0x82,0xff,0xff,0x00,0x09,0x0f,0x82,0x00,
0xff,0xff,0x82,0xff,0xff,0x00,0x09,0x0f,0x82,0x00,0xff,0xff,0x81,0xff,0xff,0x0b,
0x00,0x81,0xff,0xff,0x0f,0xff,};
static PegBitmap gbFileSmallBitmap = { 0x11, 8, 16, 16, 0x000000ff, (UCHAR *) ucfilsmallBitmap};

// The Home bitmap
static ROMDATA UCHAR uchomeBitmap[159] = {
0x0f,0xff,0x07,0xff,0x80,0x00,0x06,0xff,0x06,0xff,0x02,0x00,0x05,0xff,0x05,0xff,
0x84,0x00,0x00,0x13,0x00,0x00,0x04,0xff,0x04,0xff,0x86,0x00,0x00,0x13,0x09,0x13,
0x00,0x00,0x03,0xff,0x03,0xff,0x88,0x00,0x00,0x13,0x09,0x0b,0x09,0x09,0x00,0x00,
0x02,0xff,0x02,0xff,0x82,0x00,0x00,0x13,0x05,0x09,0x83,0x00,0x00,0xff,0xff,0x02,
0xff,0x81,0x00,0x00,0x02,0x09,0x87,0x0b,0x13,0x09,0x09,0x00,0x00,0xff,0xff,0x03,
0xff,0x82,0x00,0x09,0x09,0x02,0x0b,0x82,0x13,0x09,0x00,0x02,0xff,0x03,0xff,0x82,
0x00,0x09,0x09,0x02,0x0b,0x82,0x13,0x09,0x00,0x02,0xff,0x03,0xff,0x82,0x00,0x09,
0x09,0x02,0x0b,0x82,0x13,0x09,0x00,0x02,0xff,0x03,0xff,0x82,0x00,0x09,0x09,0x02,
0x0b,0x82,0x13,0x09,0x00,0x02,0xff,0x03,0xff,0x82,0x00,0x09,0x09,0x02,0x0b,0x82,
0x13,0x13,0x00,0x02,0xff,0x03,0xff,0x08,0x00,0x02,0xff,0x0f,0xff,0x0f,0xff,};
static PegBitmap gbHomeBitmap = { 0x11, 8, 16, 16, 0x000000ff, (UCHAR *) uchomeBitmap};

// The Refresh bitmap
static ROMDATA UCHAR ucrefreshBitmap[146] = {
0x0f,0xff,0x84,0xff,0xff,0x09,0xff,0xff,0x05,0x09,0x04,0xff,0x83,0xff,0xff,0x09,
0xff,0x07,0x09,0x03,0xff,0x81,0xff,0xff,0x02,0x09,0x05,0xff,0x81,0x09,0x09,0x02,
0xff,0x81,0xff,0xff,0x04,0x09,0x04,0xff,0x83,0x09,0x09,0xff,0xff,0x82,0xff,0x0c,
0x0c,0x09,0xff,0x82,0x09,0x09,0xff,0x82,0xff,0x0c,0x0c,0x09,0xff,0x82,0x09,0x09,
0xff,0x82,0xff,0x0c,0x0c,0x09,0xff,0x82,0x09,0x09,0xff,0x82,0xff,0x0c,0x0c,0x09,
0xff,0x82,0x09,0x09,0xff,0x82,0xff,0x0c,0x0c,0x09,0xff,0x82,0x09,0x09,0xff,0x83,
0xff,0xff,0x0c,0x0c,0x05,0xff,0x03,0x0c,0x81,0xff,0xff,0x02,0xff,0x81,0x0c,0x0c,
0x05,0xff,0x02,0x0c,0x81,0xff,0xff,0x03,0xff,0x07,0x0c,0x83,0xff,0x0c,0xff,0xff,
0x04,0xff,0x05,0x0c,0x84,0xff,0xff,0x0c,0xff,0xff,0x0c,0xff,0x82,0x0c,0xff,0xff,
0x0f,0xff,};
static PegBitmap gbRefreshBitmap = { 0x11, 8, 16, 16, 0x000000ff, (UCHAR *) ucrefreshBitmap};

// The Up a Directory bitmap
static ROMDATA UCHAR ucupdirBitmap[77] = {
0x0f,0xff,0x0f,0xff,0x05,0xff,0x80,0x7c,0x08,0xff,0x04,0xff,0x02,0x7c,0x07,0xff,
0x03,0xff,0x04,0x7c,0x06,0xff,0x05,0xff,0x80,0x7c,0x08,0xff,0x05,0xff,0x80,0x7c,
0x08,0xff,0x05,0xff,0x80,0x7c,0x08,0xff,0x05,0xff,0x80,0x7c,0x08,0xff,0x05,0xff,
0x80,0x7c,0x08,0xff,0x05,0xff,0x80,0x7c,0x08,0xff,0x05,0xff,0x80,0x7c,0x08,0xff,
0x06,0xff,0x06,0x7c,0x81,0xff,0xff,0x0f,0xff,0x0f,0xff,0x0f,0xff,};
static PegBitmap gbUpDirBitmap = { 0x11, 8, 16, 16, 0x000000ff, (UCHAR *) ucupdirBitmap};

// The filter bitmap
ROMDATA UCHAR ucfilterBitmap[113] = {
0x0f,0xff,0x80,0xff,0x0c,0x00,0x81,0xff,0xff,0x82,0xff,0xff,0x00,0x08,0x09,0x80,
0x00,0x02,0xff,0x02,0xff,0x80,0x00,0x06,0x09,0x80,0x00,0x03,0xff,0x03,0xff,0x80,
0x00,0x04,0x09,0x80,0x00,0x04,0xff,0x04,0xff,0x80,0x00,0x02,0x09,0x80,0x00,0x05,
0xff,0x04,0xff,0x80,0x00,0x02,0x09,0x80,0x00,0x05,0xff,0x04,0xff,0x80,0x00,0x02,
0x09,0x80,0x00,0x05,0xff,0x04,0xff,0x80,0x00,0x02,0x09,0x80,0x00,0x05,0xff,0x04,
0xff,0x80,0x00,0x02,0x09,0x80,0x00,0x05,0xff,0x04,0xff,0x80,0x00,0x02,0x09,0x80,
0x00,0x05,0xff,0x04,0xff,0x04,0x00,0x05,0xff,0x0f,0xff,0x0f,0xff,0x0f,0xff,0x0f,
0xff,};
PegBitmap gbFilterBitmap = { 0x11, 8, 16, 16, 0x000000ff, (UCHAR *) ucfilterBitmap};

#endif  // INCLUDE_PFDIALOG_BITMAPS


