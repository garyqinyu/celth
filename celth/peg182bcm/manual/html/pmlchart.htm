<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Jim DeLisle">
   <META NAME="GENERATOR" CONTENT="UltraEdit32">
   <title>PEG Reference Manual</title>
</head>
<body text="#000000" bgcolor="#FFFBF7" link="#0000EE" vlink="#551A8B" alink="#FF0000">
<a href="../refman.htm"><img SRC="index.gif" BORDER=0 ></a>
<table BORDER=2 COLS=6 WIDTH="100%" BGCOLOR="#CCCCCC" >
<tr>
<td>
<center><a href="#Derivation">Derivation</a></center>
</td>

<td>
<center><a href="#Members">Members</a></center>
</td>

<td>
<center><a href="#Styles">Styles</a></center>
</td>

<td>
<center><a href="#Signals">Signals</a></center>
</td>

<td>
<center><a href="#Examples">Example</a></center>
</td>

<td>
<center><a href="#See Also">See Also</a></center>
</td>
</tr>
</table>

<center>
<p><b><font color="#9C0000"><font size=+2>PegMultiLineChart</font></font></b></center>

<p><b><u><font face="Arial,Helvetica"><font size=+1>Overview</font></font></u></b>
<p><font face="Arial,Helvetica"><font color="#000000">PegMultiLineChart
supports the drawing of discrete lines which use the same x and y scaling.</font></font>
<br>&nbsp;

<p><a NAME="See Also"></a>
<br><u><font face="Arial,Helvetica"><font color="#000000"><font size=+1>See
Also</font></font></font></u>
<br><font face="Arial,Helvetica"><a href="plnchart.htm">PegLineChart</a></font>

<p><a NAME="Styles"></a>
<br><u><font face="Arial,Helvetica"><font color="#000000"><font size=+1>Style
Flags</font></font></font></u>
<br><font face="Arial,Helvetica"><font color="#000000">For a complete
listing of styles supported by PegMultiLineChart, see 
<A HREF="pchart.htm#Styles">PegChart</A>.

<P>
<a NAME="Signals"></a><u><font face="Arial,Helvetica"><font size=+1>Signals</font></font></u>
<br>PegMultiLineChart does not send any signals..
<p><a NAME="Derivation"></a>
<br><u><font face="Arial,Helvetica"><font size=+1>Derivation</font></font></u>
<br>PegMultiLineChart is derived from <a href="pchart.htm">PegChart</a>.

<p><a NAME="Members"></a>
<br><u><font size=+1>Constructor:</font></u>
<p><img SRC="bullet1.jpg" height=11 width=12> <b>PegMultiLineChart(const
PegRect&amp; Rect, LONG lMinX, LONG lMaxX, LONG lMinY, LONG lMaxY, WORD
wMajorXScale = 0, WORD wMajorYScale = 0)</b>
<br>The constructor is fairly straight forward. Like most PegThing derived
objects, you pass it the rectangle you wish for it to occupy. If you have
CS_AUTOSIZE turned on, you may just want to pass it the parent's mClient
rectangle.
<p>The next four LONG values specify the minimum and maximum values for
X and Y. The last two parameters are for setting the major tick mark frequency
for the X and Y axis, respectively. For instance, if your minimum Y value
is -100 and your maximum Y value is 900, and you specify a Y scale of 100,
if the CS_DRAWYTICS bit is set in the extended style flag, you will see
tick marks on the Y axis starting at -100 and incrementing 100 all the
way to 900. Therefore, there will be 11 tick marks drawn on the Y axis.
If you were to also turn on the CS_DRAWYGRID bit, you would see a grid
line at the same interval as the tick marks. Label scaling, or interval,
is independant of the tick mark/grid line scaling. Therefore, it is possible
to specify tick marks to appear at intervals of 100, while specifying labels
to be drawn every 200. No matter the scaling, all drawing starts at the
minimum value and works it's way toward the maximum value until it meets
or exceeds the maximum value. This holds true for both the X and Y axis.
<p><u><font size=+1>Public Functions:</font></u>
<p><img SRC="bullet1.jpg" height=11 width=12><b> UCHAR AddLine(COLORVAL
tColor)</b>
<br>This method is used to add a new line to the chart. tColor is used
to draw the line in the specified color. The return value is the ID of
the new line. It is possible to add a maximum of 256 lines to a single
chart.
<p><img SRC="bullet1.jpg" height=11 width=12><b> PegChartPoint* AddPoint(UCHAR
ucID, LONG lX, LONG lY)</b>
<br>This method adds a new point to the end of the line segment identified
by ucID. It returns a pointer to the newly created point.
<p><img SRC="bullet1.jpg" height=11 width=12> <b>virtual void Draw(void)</b>
<br>PegMultiLineChart overrides the Draw() function to draw the individual
lines.
<p><img SRC="bullet1.jpg" height=11 width=12> <b>void DrawNewLineData(PegChartLine* pLine, PegChartPoint* pNew, PegChartPoint* pPrevious = NULL)</b>
<br>This function determines the area of the chart that has changed due to a new point and then redraws that area. This method is called from the AddPoint and InsertPoint methods when new data is added to the line. If pPrevious is NULL, then the entire line is redrawn.
<p><img SRC="bullet1.jpg" height=11 width=12><b> PegChartLine* GetFirstLine()
const</b>
<br>Returns the first line segment, or NULL if there are no lines in the
chart.
<p><img SRC="bullet1.jpg" height=11 width=12><b> PegChartLine* GetLineFromID(UCHAR
ucID)</b>
<br>Returns a pointer to the line segment that has the ID ucID, or NULL
if it could not find it.
<p><img SRC="bullet1.jpg" height=11 width=12><b> PegChartPoint* InsertPoint(UCHAR
ucID, PegChartPoint* pPoint, LONG lX, LONG lY)</b>
<br>This method inserts a new point <b><i>after </i></b>the point pointed
to by pPoint for the given line segment. It returns a pointer to the newly
created point.
<p><img SRC="bullet1.jpg" height=11 width=12> <b>virtual SIGNED Message(const
PegMessage&amp; Mesg)</b>
<br>PegMultiLineChart overrides the Message method in order to provide
appropriate layout recalculation when it's parent is moved, or optionally,
resized.
<p><img SRC="bullet1.jpg" height=11 width=12> <b>void RecalcLine(UCHAR
ucID)</b>
<br>This method forces a recalculation of the screen coordinates for every
point on the given line.
<p><img SRC="bullet1.jpg" height=11 width=12> <b>virtual void RecalcSize(const
PegRect&amp; NewRect, BOOL bRedraw = TRUE)</b>
<br>This method is overridden in order to ensure that the line data is
up to date. In other words, if the chart is moved or resized, the screen
coordinates associated with a given data point will change. In order to
keep up with these changes, this method calls the RecalcLine method to
update the screen coordinates of all the data points associated with the
line.
<p><img SRC="bullet1.jpg" height=11 width=12><b> BOOL RemoveLine(UCHAR
ucID)</b>
<br>This method is used to remove a line from the chart. It returns a boolean
describing it's success. When a line is removed from the chart, it's ID
is not reused.
<p><img SRC="bullet1.jpg" height=11 width=12><b> PegChartPoint* RemovePoint(UCHAR
ucID, PegChartPoint* pPoint)</b>
<br>This method removes the point pointed to by pPoint from line segment
ucID. It returns a pointer to the point proceeding the deleted point, or
NULL if there is none.
<p><img SRC="bullet1.jpg" height=11 width=12> <b>void ResetAllLines()</b>
<br>This method calls ResetLine(UCHAR) for each line in the chart.
<p><img SRC="bullet1.jpg" height=11 width=12> <b>void ResetLine(UCHAR ucID)</b>
<br>This method removes all of the points associated with the given line.
<br>
<hr>
<p><a NAME="Examples"></a>
<br><u><font size=+1>Examples:</font></u>
<p>The following code snippet produces the PegMultiLineChart pictured below.
<br>&nbsp;
<pre>&nbsp;&nbsp;&nbsp; PegMultiLineChart* pLineChart = new PegMultiLineChart(Rect, 0, 1000, 0, 1000, 100, 100);
&nbsp;&nbsp;&nbsp; pLineChart->SetXLabelScale(200);
&nbsp;&nbsp;&nbsp; pLineChart->SetExStyle(CS_DRAWXTICS | CS_DRAWYTICS | CS_DRAWXGRID |&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CS_DRAWYGRID | CS_AUTOSIZE | CS_DRAWYLABELS | CS_DRAWXLABELS);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; UCHAR LineID = pLineChart->AddLine(LIGHTGREEN);
&nbsp;&nbsp;&nbsp; pLineChart->AddPoint(LineID, 100, 100);
&nbsp;&nbsp;&nbsp; pLineChart->AddPoint(LineID, 200, 200);
&nbsp;&nbsp;&nbsp; pLineChart->AddPoint(LineID, 300, 300);
&nbsp;&nbsp;&nbsp; PegChartPoint* pPoint = pLineChart->AddPoint(LineID, 400, 400);
&nbsp;&nbsp;&nbsp; pLineChart->AddPoint(LineID, 500, 500);
&nbsp;&nbsp;&nbsp; pLineChart->AddPoint(LineID, 600, 600);
&nbsp;&nbsp;&nbsp; pLineChart->AddPoint(LineID, 700, 800);
&nbsp;&nbsp;&nbsp; pLineChart->InsertPoint(LineID, pPoint, 450, 0);

&nbsp;&nbsp;&nbsp; UCHAR LineID2 = pLineChart->AddLine(CYAN);
&nbsp;&nbsp;&nbsp; pLineChart->AddPoint(LineID2, 0, 0);
&nbsp;&nbsp;&nbsp; pLineChart->AddPoint(LineID2, 100, 500);
&nbsp;&nbsp;&nbsp; pLineChart->AddPoint(LineID2, 900, 0);
</pre>

<p><br><img SRC="image71.gif" ALT="PegMultiLineChart example screen shot" height=505 width=648>
<p>
<hr>
</body>
</html>
