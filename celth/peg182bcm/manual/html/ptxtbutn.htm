<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Kenneth G. Maxwell">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.06 [en]C-gatewaynet  (Win98; I) [Netscape]">
   <TITLE>PEG Reference Manual</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFBF7" LINK="#0000EE" VLINK="#551A8B" ALINK="#FF0000">
<A HREF="../refman.htm"><IMG SRC="index.gif" BORDER=0 ></A>
<TABLE BORDER=2 COLS=6 WIDTH="100%" BGCOLOR="#CCCCCC" >
<TR>
<TD>
<CENTER><A HREF="#Derivation">Derivation</A></CENTER>
</TD>

<TD>
<CENTER><A HREF="#Members">Members</A></CENTER>
</TD>

<TD>
<CENTER><A HREF="#Styles">Styles</A></CENTER>
</TD>

<TD>
<CENTER><A HREF="#Signals">Signals</A></CENTER>
</TD>

<TD>
<CENTER><A HREF="#Examples">Example</A></CENTER>
</TD>

<TD>
<CENTER><A HREF="#See Also">See Also</A></CENTER>
</TD>
</TR>
</TABLE>

<CENTER><B><FONT COLOR="#9C0000"><FONT SIZE=+2>PegTextButton</FONT></FONT></B></CENTER>

<P><B><U><FONT FACE="Arial,Helvetica"><FONT SIZE=+1>Overview</FONT></FONT></U></B>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">PegTextButton provides
a pushbutton object with visual feedback indicating to the user the button
depress and release operation.</FONT></FONT>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">Any custom fonts
or colors may be applied to PegTextButton. Users often create custom derived
versions of PegTextButton to draw modified border styles, modified border
shapes, etc. PegTextButton is also commonly used to populate PegHorzList
and PegVertList objects.</FONT></FONT>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">While PegTextButton
is most often a 'bottom level' object, it is possible to add children to
a PegTextButton to further customize the appearance of your user interface.</FONT></FONT>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">The text string displayed
on the button face is vertically centered over button client area, and
may be horizontally justified in different ways using the text justification
style flags.</FONT></FONT>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">&nbsp;</FONT></FONT>
<P><A NAME="See Also"></A><U><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><FONT SIZE=+1>See
Also</FONT></FONT></FONT></U>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><A HREF="pmltbtn.htm">PegMLTextButton</A></FONT></FONT>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><A HREF="pbitbutn.htm">PegBitmapButton</A></FONT></FONT>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><A HREF="pradbutn.htm">PegRadioButton</A></FONT></FONT>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><A HREF="pchkbox.htm">PegCheckBox</A></FONT></FONT>
<P><A NAME="Styles"></A><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><U><FONT SIZE=+1>Style
Flags</FONT></U></FONT></FONT>
<BR><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">PegTextButton supports
the following styles:</FONT></FONT>
<TABLE BORDER=2 COLS=2 WIDTH="100%" >
<TR>
<TD>TJ_RIGHT</TD>

<TD COLSPAN="2">Right justified text.</TD>
</TR>

<TR>
<TD>TJ_LEFT</TD>

<TD COLSPAN="2">Left justified text.</TD>
</TR>

<TR>
<TD>TJ_CENTER</TD>

<TD COLSPAN="2">Centered text.</TD>
</TR>

<TR>
<TD>TT_COPY</TD>

<TD COLSPAN="2">Instructs the button to copy the string assigned. This
flag should be used when the string assigned to the button is created dynamically
using temporary storage.</TD>
</TR>

<TR>
<TD>BF_REPEAT</TD>

<TD COLSPAN="2">This flag causes the button to send periodic PSF_CLICKED
signals when held down by the user.&nbsp;</TD>
</TR>

<TR>
<TD>BF_DOWNACTION</TD>

<TD COLSPAN="2">This flag causes the button to send the PSF_CLICKED signal
on the down press of the button, rather than the default action which is
to signal on the button release.&nbsp;</TD>
</TR>

<TR>
<TD>AF_ENABLED</TD>

<TD COLSPAN="2">This flag allows the button to be selected.</TD>
</TR>
</TABLE>
<P><A NAME="Signals"></A><U><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><FONT SIZE=+1>Signals</FONT></FONT></FONT></U>
<BR><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">PegTextButton sends PSF_CLICKED signals when selected.</FONT></FONT>
<A NAME="Derivation"></A><U><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><FONT SIZE=+1>Derivation</FONT></FONT></FONT></U>
<BR><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">PegTextButton is derived
from <A HREF="pbutton.htm">PegButton</A> and
<A HREF="ptxtthng.htm">PegTextThing</A>.</FONT></FONT>
<BR>&nbsp;
<BR>&nbsp;
<P><A NAME="Members"></A>
<BR><U><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><FONT SIZE=+1>Constructors:</FONT></FONT></FONT></U>
<P><IMG SRC="bullet1.jpg" HEIGHT=11 WIDTH=12><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">
<B>PegTextButton(PegRect
&amp;Rect, const PEGCHAR *text, WORD wId = 0, WORD wStyle = AF_ENABLED)</B></FONT></FONT>
<BR><IMG SRC="bullet1.jpg" HEIGHT=11 WIDTH=12><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">
<B>PegTextButton(SIGNED
iLeft, SIGNED iTop, SIGNED iWidth, const PEGCHAR *text, WORD wId = 0, WORD wStyle
= AF_ENABLED)</B></FONT></FONT>
<BR><IMG SRC="bullet1.jpg" HEIGHT=11 WIDTH=12><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">
<B>PegTextButton(SIGNED
iLeft, SIGNED iTop, const PEGCHAR *text, WORD wId = 0, WORD wStyle = AF_ENABLED)</B></FONT></FONT>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">PegTextButton offers three constructors, depending on how you want
to specify the button size. The first constructor allows you to fully specify
the button size and position. The second constructor allows you to specify
the top-left corner of the button and the button width. The last constructor
allows you to specify the top-left corner position of the button. In this
case the button calculates its own height based on the default system font.</FONT></FONT>
<P><U><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><FONT SIZE=+1>Public
Functions:</FONT></FONT></FONT></U>
<P><IMG SRC="bullet1.jpg" HEIGHT=11 WIDTH=12><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">
<B>virtual void DataSet(const PEGCHAR *pText)</B></FONT></FONT>
<BR><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">PegTextButton overrides
the DataSet() function to invalidate the button client area.</FONT></FONT>
<P><IMG SRC="bullet1.jpg" HEIGHT=11 WIDTH=12><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">
<B>virtual void Draw(void)</B></FONT></FONT>
<BR><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">PegTextButton overrides
the Draw() function to draw the text on the button face.</FONT></FONT>
<HR>
<P><A NAME="Examples"></A>
<P><U><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000"><FONT SIZE=+1>Examples:</FONT></FONT></FONT></U>
<P><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">The following are
each different styles of PegTextButton:</FONT></FONT>
<BR><IMG SRC="image20.gif" >
<HR><FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">The following is
an example of overriding the Draw() function to create
a custom button appearance. This example creates a button similar to the
lower-right example above.</FONT></FONT>
<PRE>
<FONT FACE="Arial,Helvetica"><FONT COLOR="#000000">void CustomButton::Draw(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PegColor Color;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BeginDraw();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Style() &amp; BF_SELECTED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color.uForeground = BLACK;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color.uForeground = LIGHTGRAY;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // draw the top:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line(mReal.wLeft, mReal.wTop, mReal.wRight, mReal.wTop,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color, 3);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // draw the left:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line(mReal.wLeft, mReal.wTop, mReal.wLeft, mReal.wBottom,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color, 3);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Style() &amp; BF_SELECTED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color.uForeground = LIGHTGRAY;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color.uForeground = BLACK;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // draw the right shadow:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line(mReal.wRight, mReal.wTop, mReal.wRight,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mReal.wBottom - 2, Color, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line(mReal.wRight - 1, mReal.wTop + 1, mReal.wRight - 1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mReal.wBottom - 2, Color, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line(mReal.wRight - 2, mReal.wTop + 2, mReal.wRight - 2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mReal.wBottom - 2,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // draw the bottom shadow:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line(mReal.wLeft, mReal.wBottom, mReal.wRight,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mReal.wBottom, Color, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line(mReal.wLeft + 1, mReal.wBottom - 1, mReal.wRight,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mReal.wBottom - 1, Color, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line(mReal.wLeft + 2, mReal.wBottom - 2, mReal.wRight,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mReal.wBottom - 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // fill in the button client area:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color.Set(LIGHTRED, DARKGRAY, CF_FILL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rectangle(mClient, Color);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // draw the text centered:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PegPoint Put;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put.x = (mClient.wLeft + mClient.wRight) &gt;&gt; 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put.x -= TextWidth(mpText, &amp;SysFont) &gt;&gt; 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put.y = mClient.wTop + 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Style() &amp; BF_SELECTED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put.x++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put.y++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color.Set(WHITE, BLACK, CF_NONE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DrawText(Put, mpText, Color, &amp;SysFont);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EndDraw();
}</FONT></FONT></PRE>

</BODY>
</HTML>
